{"version":3,"sources":["logo.svg","ep.JPG","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderBox","styled","Box","background","border","verticalAlign","AppHeader","className","boxShadow","ButtonGroup","variant","aria-label","Button","size","href","target","Component","useStyles","makeStyles","theme","root","flexGrow","paper","color","palette","text","secondary","paper2","padding","spacing","backgroundColor","App","classes","Header","Grid","container","item","xs","sm","Paper","src","cover","alt","justify","alignItems","Typography","gutterBottom","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,gVCUrCC,EAAYC,YAAOC,IAAPD,CAAY,CAC1BE,WAAY,mDACZC,OAAQ,EACRC,cAAe,WAiCJC,E,uKAvBX,OACI,4BAAQC,UAAU,cACd,kBAACP,EAAD,CAAWQ,UAAW,GAClB,kBAACC,EAAA,EAAD,CAAaC,QAAQ,OAAOC,aAAW,+BACnC,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,4BAA4BC,OAAO,UACzD,kBAAC,IAAD,OAEJ,kBAACH,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,gCAAgCC,OAAO,UAC7D,kBAAC,IAAD,OAEJ,kBAACH,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,kBACtB,kBAAC,IAAD,OAEJ,kBAACF,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,iDAAiDC,OAAO,UAC9E,kBAAC,IAAD,c,GAhBAC,a,gCCVlBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CAGLC,MAAOJ,EAAMK,QAAQC,KAAKC,WAE5BC,OAAO,CACLC,QAAST,EAAMU,QAAQ,GACvBC,gBAAiB,eA4CNC,MAxCf,WACE,IAAMC,EAAUf,IAEhB,OACE,yBAAKV,UAAU,OACb,kBAAC0B,EAAD,MACA,yBAAK1B,UAAU,eACb,kBAAC2B,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAOhC,UAAWyB,EAAQV,OACvB,yBAAKkB,IAAKC,IAAOlC,UAAU,YAAYmC,IAAI,eAGhD,kBAACR,EAAA,EAAD,CAAMC,WAAS,EACbE,GAAI,GAAIC,GAAI,EACZK,QAAQ,eACRC,WAAW,SACXd,gBAAgB,UAChBvB,UAAU,gBACR,kBAACgC,EAAA,EAAD,CAAOhC,UAAWyB,EAAQL,QACxB,kBAACkB,EAAA,EAAD,CAAYnC,QAAQ,KAAKoC,cAAY,GAArC,aAGA,kBAACD,EAAA,EAAD,CAAYnC,QAAQ,YAAYoC,cAAY,GAC1C,sFAED,yBAAKN,IAAKO,IAAMxC,UAAU,WAAWmC,IAAI,SAC1C,kBAACG,EAAA,EAAD,CAAYnC,QAAQ,QAAQoC,cAAY,GAAxC,wBACuB,6BADvB,2CAE0C,6BACxC,uBAAGvC,UAAU,WAAWO,KAAK,KAA7B,wCC5CEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afe44c2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6e251a6f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ep.6016a94f.JPG\";","import React, {Component} from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\n\nconst HeaderBox = styled(Box)({\n    background: 'linear-gradient(45deg, #87bdc7 30%, #CAC486 90%)',\n    border: 0,\n    verticalAlign: 'middle',\n    //borderRadius: 3,\n    //boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    //color: 'white',\n    //height: 48,\n    //padding: '0 30px',\n});\n\nclass AppHeader extends Component {\n  render() {\n    return (\n        <header className=\"App-header\">\n            <HeaderBox boxShadow={3}>\n                <ButtonGroup variant=\"text\" aria-label=\"text info.main button group\">\n                    <Button size=\"large\" href=\"https://github.com/emmalu\" target=\"_blank\">\n                        <GitHubIcon />\n                    </Button>\n                    <Button size=\"large\" href=\"https://linkedin.com/in/elpaz\" target=\"_blank\">\n                        <LinkedInIcon />\n                    </Button>\n                    <Button size=\"large\" href=\"tel:4045421123\">\n                        <PhoneIphoneIcon />\n                    </Button>\n                    <Button size=\"large\" href=\"mailto:emma.lu.paz@gmail.com?Subject=Portfolio\" target=\"_blank\">\n                        <AlternateEmailIcon />\n                    </Button>\n                </ButtonGroup>\n            </HeaderBox>\n        </header>\n    )\n  }\n};\n\nexport default AppHeader;","import React from 'react';\nimport logo from './logo.svg';\nimport cover from './ep.JPG';\nimport './App.css';\nimport Header from './components/Header';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    //padding: theme.spacing(2),\n    //textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  paper2:{\n    padding: theme.spacing(5),\n    backgroundColor: '#87bdc7',\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-content\">\n        <Grid container>\n          <Grid item xs={12} sm={6}>\n            <Paper className={classes.paper}>\n              {<img src={cover} className=\"App-cover\" alt=\"ep-cover\" />}\n            </Paper>\n          </Grid>\n          <Grid container\n            xs={12} sm={6}\n            justify=\"space-evenly\"\n            alignItems=\"center\"\n            backgroundColor=\"#E3DEC9\"\n            className=\"App-contours\">\n              <Paper className={classes.paper2}>\n                <Typography variant=\"h3\" gutterBottom>\n                  MapMazeLu\n                </Typography>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  <code>GIS Professional • Developer • Enthusiast</code>\n                </Typography>\n                {<img src={logo} className=\"App-logo\" alt=\"logo\" />}\n                <Typography variant=\"body1\" gutterBottom>\n                  B I E N V E N I D O S<br />\n                  Thanks for visiting my online portfolio.<br />\n                  <a className=\"App-link\" href=\"#\">Please, have a look around...</a>\n                </Typography>\n              </Paper>\n            </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}